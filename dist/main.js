/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/styles/main.scss":
/*!******************************!*\
  !*** ./src/styles/main.scss ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _styles_main_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/main.scss */ "./src/styles/main.scss");

let regionNames = new Intl.DisplayNames(['en'], {
  type: 'region'
});

function getPos() {
  return new Promise((res, rej) => {
    navigator.geolocation.getCurrentPosition(res, rej);
  });
}

function apiCall(latitude, longitude) {
  return fetch("https://api.openweathermap.org/data/2.5/weather?lat=".concat(latitude, "&lon=").concat(longitude, "&units=metric&appid=31d60ae22906002464e0e7f4ef608bc5"), {
    mode: 'cors'
  });
}

function apiSearch(loc) {
  return fetch("https://api.openweathermap.org/data/2.5/weather?q=".concat(loc, "&units=metric&appid=31d60ae22906002464e0e7f4ef608bc5"), {
    mode: 'cors'
  });
}

async function weatherLoad() {
  try {
    const userPos = await getPos();
    const userLat = userPos.coords.latitude;
    const userLong = userPos.coords.longitude;
    const userAPI = await apiCall(userLat, userLong);

    if (userAPI.ok === true) {
      const userJSON = await userAPI.json();
      const userForecast = await weatherLoadForecast(userLat, userLong);
      const userForecastJSON = await userForecast.json();
      const fiveDay = [];
      userForecastJSON.list.forEach(item => {
        if (item.dt_txt.includes("12:00:00")) {
          fiveDay.push(item);
        }
      });
      const userWeatherData = {
        loc: userJSON.name,
        country: userJSON.sys.country,
        temp: userJSON.main.temp,
        feelsLike: userJSON.main.feels_like,
        desc: userJSON.weather[0].description.charAt(0).toUpperCase() + userJSON.weather[0].description.slice(1),
        humidity: userJSON.main.humidity,
        windSpeed: userJSON.wind.speed,
        icon: userJSON.weather[0].icon,
        forecast: fiveDay
      };
      return userWeatherData;
    } else {
      throw new Error(userAPI.statusText);
    }
  } catch (err) {
    console.log(err);
  }
}

function addForecast(weatherObj) {
  const main = document.querySelector('.main');
  const container = document.querySelector('.forecast');
  container.textContent = '';
  weatherObj.forecast.forEach(item => {
    const date = item.dt_txt.split(' ');
    const newDate = new Date(date[0]).toLocaleDateString();
    const forecastContainer = document.createElement('div');
    const fDate = document.createElement('p');
    const icon = document.createElement('img');
    icon.src = "https://openweathermap.org/img/wn/".concat(item.weather[0].icon, ".png");
    const fTemp = document.createElement('p');
    const fDesc = document.createElement('p');
    fDate.textContent = newDate;
    fTemp.textContent = "".concat(Math.round(item.main.temp), "\xB0C");
    fDesc.textContent = "".concat(item.weather[0].description.charAt(0).toUpperCase() + item.weather[0].description.slice(1));
    forecastContainer.appendChild(fDate);
    forecastContainer.appendChild(icon);
    forecastContainer.appendChild(fTemp);
    forecastContainer.appendChild(fDesc);
    container.appendChild(forecastContainer);
  });
  main.appendChild(container);
}

function weatherLoadForecast(latitude, longitude) {
  return fetch("https://api.openweathermap.org/data/2.5/forecast?lat=".concat(latitude, "&lon=").concat(longitude, "&units=metric&appid=31d60ae22906002464e0e7f4ef608bc5"), {
    mode: 'cors'
  });
}

function weatherSearchForecast(loc) {
  return fetch("https://api.openweathermap.org/data/2.5/forecast?q=".concat(loc, "&units=metric&appid=31d60ae22906002464e0e7f4ef608bc5"), {
    mode: 'cors'
  });
}

async function searchWeather(location) {
  try {
    const weatherSearch = await apiSearch(location);

    if (weatherSearch.ok === true) {
      console.log(weatherSearch);
      const weatherJSON = await weatherSearch.json();
      const weatherForecast = await weatherSearchForecast(location);
      const weatherForecastJSON = await weatherForecast.json();
      const fiveDay = [];
      weatherForecastJSON.list.forEach(item => {
        if (item.dt_txt.includes("12:00:00")) {
          fiveDay.push(item);
        }
      });
      const weatherData = {
        loc: weatherJSON.name,
        country: weatherJSON.sys.country,
        temp: Math.round(weatherJSON.main.temp * 10 / 10),
        feelsLike: weatherJSON.main.feels_like,
        desc: weatherJSON.weather[0].description.charAt(0).toUpperCase() + weatherJSON.weather[0].description.slice(1),
        humidity: weatherJSON.main.humidity,
        windSpeed: weatherJSON.wind.speed,
        icon: weatherJSON.weather[0].icon,
        forecast: fiveDay
      };
      return weatherData;
    } else {
      throw new Error(weatherSearch.statusText);
    }
  } catch (err) {
    console.log(err);
  }
}

function addToDOM(weatherObj) {
  const main = document.querySelector('.main');
  const container = document.querySelector('.weather-info');
  container.textContent = '';
  const pLoc = document.createElement('p');
  const pTemp = document.createElement('p');
  const pFeels = document.createElement('p');
  const pDesc = document.createElement('p');
  const pHumid = document.createElement('p');
  const pWind = document.createElement('p');
  const icon = document.createElement('img');
  icon.src = "https://openweathermap.org/img/wn/".concat(weatherObj.icon, ".png");
  pLoc.textContent = "".concat(weatherObj.loc, ", ").concat(regionNames.of(weatherObj.country));
  pTemp.textContent = "Temperature: ".concat(Math.round(weatherObj.temp), "\xB0C (").concat(getBurgerTemperature(weatherObj.temp), "\xB0F)");
  pFeels.textContent = "Feels like: ".concat(Math.round(weatherObj.feelsLike), "\xB0C (").concat(getBurgerTemperature(weatherObj.feelsLike), "\xB0F)");
  pDesc.textContent = "Weather: ".concat(weatherObj.desc);
  pHumid.textContent = "Humidity: ".concat(weatherObj.humidity, "%");
  pWind.textContent = "Wind speed: ".concat(weatherObj.windSpeed, " m/s (").concat(getBurgerSpeed(weatherObj.windSpeed), " ft/s)");
  container.appendChild(pLoc);
  container.appendChild(pTemp);
  container.appendChild(pFeels);
  container.appendChild(pDesc);
  container.appendChild(pHumid);
  container.appendChild(pWind);
  container.appendChild(icon);
  main.appendChild(container);
}

function getBurgerTemperature(tempCel) {
  var temp = parseFloat(tempCel);
  return Math.round(temp * 9 / 5 + 32);
}

function getBurgerSpeed(speedMS) {
  var speed = parseFloat(speedMS);
  return Math.round(speed * 3.28084);
}

window.addEventListener('load', () => {
  weatherLoad().then(data => {
    addToDOM(data);
    addForecast(data);
  });
});
const input = document.querySelector('.weather-input');
const submitBtn = document.querySelector('.submit');
submitBtn.addEventListener('click', e => {
  e.preventDefault();
  const userInput = input.value;
  searchWeather(userInput).then(data => {
    addToDOM(data);
    addForecast(data);
  });
});
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,