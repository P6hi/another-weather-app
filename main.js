/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/styles/main.scss":
/*!******************************!*\
  !*** ./src/styles/main.scss ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _styles_main_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/main.scss */ "./src/styles/main.scss");

let regionNames = new Intl.DisplayNames(['en'], {
  type: 'region'
});

function getPos() {
  return new Promise((res, rej) => {
    navigator.geolocation.getCurrentPosition(res, rej);
  });
}

function apiCall(latitude, longitude) {
  return fetch("https://api.openweathermap.org/data/2.5/weather?lat=".concat(latitude, "&lon=").concat(longitude, "&units=metric&appid=31d60ae22906002464e0e7f4ef608bc5"), {
    mode: 'cors'
  });
}

function apiSearch(loc) {
  return fetch("https://api.openweathermap.org/data/2.5/weather?q=".concat(loc, "&units=metric&appid=31d60ae22906002464e0e7f4ef608bc5"), {
    mode: 'cors'
  });
}

async function weatherLoad() {
  const userPos = await getPos();
  const userLat = userPos.coords.latitude;
  const userLong = userPos.coords.longitude;
  const userAPI = await apiCall(userLat, userLong);
  const userJSON = await userAPI.json();
  const userForecast = await weatherLoadForecast(userLat, userLong);
  const userForecastJSON = await userForecast.json();
  const fiveDay = [];
  userForecastJSON.list.forEach(item => {
    if (item.dt_txt.includes("12:00:00")) {
      fiveDay.push(item);
    }
  });
  const userWeatherData = {
    loc: userJSON.name,
    country: userJSON.sys.country,
    temp: userJSON.main.temp,
    feelsLike: userJSON.main.feels_like,
    desc: userJSON.weather[0].description.charAt(0).toUpperCase() + userJSON.weather[0].description.slice(1),
    humidity: userJSON.main.humidity,
    windSpeed: userJSON.wind.speed,
    icon: userJSON.weather[0].icon,
    forecast: fiveDay
  };
  return userWeatherData;
}

function addForecast(weatherObj) {
  const main = document.querySelector('.main');
  const container = document.querySelector('.forecast');
  container.textContent = '';
  weatherObj.forecast.forEach(item => {
    const date = item.dt_txt.split(' ');
    const newDate = new Date(date).toLocaleDateString();
    const forecastContainer = document.createElement('div');
    const fDate = document.createElement('p');
    const icon = document.createElement('img');
    icon.src = "https://openweathermap.org/img/wn/".concat(item.weather[0].icon, ".png");
    const fTemp = document.createElement('p');
    const fDesc = document.createElement('p');
    fDate.textContent = newDate;
    fTemp.textContent = "".concat(Math.round(item.main.temp), "\xB0C");
    fDesc.textContent = "".concat(item.weather[0].description.charAt(0).toUpperCase() + item.weather[0].description.slice(1));
    forecastContainer.appendChild(fDate);
    forecastContainer.appendChild(icon);
    forecastContainer.appendChild(fTemp);
    forecastContainer.appendChild(fDesc);
    container.appendChild(forecastContainer);
  });
  main.appendChild(container);
}

function weatherLoadForecast(latitude, longitude) {
  return fetch("https://api.openweathermap.org/data/2.5/forecast?lat=".concat(latitude, "&lon=").concat(longitude, "&units=metric&appid=31d60ae22906002464e0e7f4ef608bc5"), {
    mode: 'cors'
  });
}

function weatherSearchForecast(loc) {
  return fetch("https://api.openweathermap.org/data/2.5/forecast?q=".concat(loc, "&units=metric&appid=31d60ae22906002464e0e7f4ef608bc5"), {
    mode: 'cors'
  });
}

async function searchWeather(location) {
  const weatherSearch = await apiSearch(location);
  const weatherJSON = await weatherSearch.json();
  const weatherForecast = await weatherSearchForecast(location);
  const weatherForecastJSON = await weatherForecast.json();
  const fiveDay = [];
  weatherForecastJSON.list.forEach(item => {
    if (item.dt_txt.includes("12:00:00")) {
      fiveDay.push(item);
    }
  });
  const weatherData = {
    loc: weatherJSON.name,
    country: weatherJSON.sys.country,
    temp: Math.round(weatherJSON.main.temp * 10 / 10),
    feelsLike: weatherJSON.main.feels_like,
    desc: weatherJSON.weather[0].description.charAt(0).toUpperCase() + weatherJSON.weather[0].description.slice(1),
    humidity: weatherJSON.main.humidity,
    windSpeed: weatherJSON.wind.speed,
    icon: weatherJSON.weather[0].icon,
    forecast: fiveDay
  };
  return weatherData;
}

function addToDOM(weatherObj) {
  const main = document.querySelector('.main');
  const container = document.querySelector('.weather-info');
  container.textContent = '';
  const pLoc = document.createElement('p');
  const pTemp = document.createElement('p');
  const pFeels = document.createElement('p');
  const pDesc = document.createElement('p');
  const pHumid = document.createElement('p');
  const pWind = document.createElement('p');
  const icon = document.createElement('img');
  icon.src = "https://openweathermap.org/img/wn/".concat(weatherObj.icon, ".png");
  pLoc.textContent = "".concat(weatherObj.loc, ", ").concat(regionNames.of(weatherObj.country));
  pTemp.textContent = "Temperature: ".concat(Math.round(weatherObj.temp), "\xB0C (").concat(getBurgerTemperature(weatherObj.temp), "\xB0F)");
  pFeels.textContent = "Feels like: ".concat(Math.round(weatherObj.feelsLike), "\xB0C (").concat(getBurgerTemperature(weatherObj.feelsLike), "\xB0F)");
  pDesc.textContent = "Weather: ".concat(weatherObj.desc);
  pHumid.textContent = "Humidity: ".concat(weatherObj.humidity, "%");
  pWind.textContent = "Wind speed: ".concat(weatherObj.windSpeed, " m/s (").concat(getBurgerSpeed(weatherObj.windSpeed), " ft/s)");
  container.appendChild(pLoc);
  container.appendChild(pTemp);
  container.appendChild(pFeels);
  container.appendChild(pDesc);
  container.appendChild(pHumid);
  container.appendChild(pWind);
  container.appendChild(icon);
  main.appendChild(container);
}

function getBurgerTemperature(tempCel) {
  var temp = parseFloat(tempCel);
  return Math.round(temp * 9 / 5 + 32);
}

function getBurgerSpeed(speedMS) {
  var speed = parseFloat(speedMS);
  return Math.round(speed * 3.28084);
}

window.addEventListener('load', () => {
  weatherLoad().then(data => {
    addToDOM(data);
    addForecast(data);
  });
});
const input = document.querySelector('.weather-input');
const submitBtn = document.querySelector('.submit');
submitBtn.addEventListener('click', e => {
  e.preventDefault();
  const userInput = input.value;
  searchWeather(userInput).then(data => {
    addToDOM(data);
    addForecast(data);
  });
});
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOzs7Ozs7O1VDQUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTs7VUFFQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTs7Ozs7V0N0QkE7V0FDQTtXQUNBO1dBQ0EsdURBQXVELGlCQUFpQjtXQUN4RTtXQUNBLGdEQUFnRCxhQUFhO1dBQzdEOzs7Ozs7Ozs7Ozs7QUNOQTtBQUVBLElBQUlBLFdBQVcsR0FBRyxJQUFJQyxJQUFJLENBQUNDLFlBQVQsQ0FBc0IsQ0FBQyxJQUFELENBQXRCLEVBQThCO0VBQUNDLElBQUksRUFBRTtBQUFQLENBQTlCLENBQWxCOztBQUVBLFNBQVNDLE1BQVQsR0FBa0I7RUFDZCxPQUFPLElBQUlDLE9BQUosQ0FBWSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztJQUM3QkMsU0FBUyxDQUFDQyxXQUFWLENBQXNCQyxrQkFBdEIsQ0FBeUNKLEdBQXpDLEVBQThDQyxHQUE5QztFQUNILENBRk0sQ0FBUDtBQUdIOztBQUVELFNBQVNJLE9BQVQsQ0FBaUJDLFFBQWpCLEVBQTJCQyxTQUEzQixFQUFzQztFQUNuQyxPQUFPQyxLQUFLLCtEQUF3REYsUUFBeEQsa0JBQXdFQyxTQUF4RSwyREFBeUk7SUFBQ0UsSUFBSSxFQUFFO0VBQVAsQ0FBekksQ0FBWjtBQUNGOztBQUVELFNBQVNDLFNBQVQsQ0FBbUJDLEdBQW5CLEVBQXdCO0VBQ3BCLE9BQU9ILEtBQUssNkRBQXNERyxHQUF0RCwyREFBaUg7SUFBQ0YsSUFBSSxFQUFFO0VBQVAsQ0FBakgsQ0FBWjtBQUNIOztBQUVELGVBQWVHLFdBQWYsR0FBNkI7RUFDekIsTUFBTUMsT0FBTyxHQUFHLE1BQU1mLE1BQU0sRUFBNUI7RUFDQSxNQUFNZ0IsT0FBTyxHQUFHRCxPQUFPLENBQUNFLE1BQVIsQ0FBZVQsUUFBL0I7RUFDQSxNQUFNVSxRQUFRLEdBQUdILE9BQU8sQ0FBQ0UsTUFBUixDQUFlUixTQUFoQztFQUNBLE1BQU1VLE9BQU8sR0FBRyxNQUFNWixPQUFPLENBQUNTLE9BQUQsRUFBVUUsUUFBVixDQUE3QjtFQUNBLE1BQU1FLFFBQVEsR0FBRyxNQUFNRCxPQUFPLENBQUNFLElBQVIsRUFBdkI7RUFDQSxNQUFNQyxZQUFZLEdBQUcsTUFBTUMsbUJBQW1CLENBQUNQLE9BQUQsRUFBVUUsUUFBVixDQUE5QztFQUNBLE1BQU1NLGdCQUFnQixHQUFHLE1BQU1GLFlBQVksQ0FBQ0QsSUFBYixFQUEvQjtFQUNBLE1BQU1JLE9BQU8sR0FBRyxFQUFoQjtFQUNBRCxnQkFBZ0IsQ0FBQ0UsSUFBakIsQ0FBc0JDLE9BQXRCLENBQThCQyxJQUFJLElBQUk7SUFDbEMsSUFBSUEsSUFBSSxDQUFDQyxNQUFMLENBQVlDLFFBQVosQ0FBcUIsVUFBckIsQ0FBSixFQUFzQztNQUNsQ0wsT0FBTyxDQUFDTSxJQUFSLENBQWFILElBQWI7SUFDSDtFQUNKLENBSkQ7RUFLQSxNQUFNSSxlQUFlLEdBQUc7SUFDcEJuQixHQUFHLEVBQUVPLFFBQVEsQ0FBQ2EsSUFETTtJQUVwQkMsT0FBTyxFQUFFZCxRQUFRLENBQUNlLEdBQVQsQ0FBYUQsT0FGRjtJQUdwQkUsSUFBSSxFQUFFaEIsUUFBUSxDQUFDaUIsSUFBVCxDQUFjRCxJQUhBO0lBSXBCRSxTQUFTLEVBQUVsQixRQUFRLENBQUNpQixJQUFULENBQWNFLFVBSkw7SUFLcEJDLElBQUksRUFBRXBCLFFBQVEsQ0FBQ3FCLE9BQVQsQ0FBaUIsQ0FBakIsRUFBb0JDLFdBQXBCLENBQWdDQyxNQUFoQyxDQUF1QyxDQUF2QyxFQUEwQ0MsV0FBMUMsS0FBMER4QixRQUFRLENBQUNxQixPQUFULENBQWlCLENBQWpCLEVBQW9CQyxXQUFwQixDQUFnQ0csS0FBaEMsQ0FBc0MsQ0FBdEMsQ0FMNUM7SUFNcEJDLFFBQVEsRUFBRTFCLFFBQVEsQ0FBQ2lCLElBQVQsQ0FBY1MsUUFOSjtJQU9wQkMsU0FBUyxFQUFFM0IsUUFBUSxDQUFDNEIsSUFBVCxDQUFjQyxLQVBMO0lBUXBCQyxJQUFJLEVBQUU5QixRQUFRLENBQUNxQixPQUFULENBQWlCLENBQWpCLEVBQW9CUyxJQVJOO0lBU3BCQyxRQUFRLEVBQUUxQjtFQVRVLENBQXhCO0VBV0EsT0FBT08sZUFBUDtBQUNIOztBQUVELFNBQVNvQixXQUFULENBQXFCQyxVQUFyQixFQUFpQztFQUM3QixNQUFNaEIsSUFBSSxHQUFHaUIsUUFBUSxDQUFDQyxhQUFULENBQXVCLE9BQXZCLENBQWI7RUFDQSxNQUFNQyxTQUFTLEdBQUdGLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixXQUF2QixDQUFsQjtFQUNBQyxTQUFTLENBQUNDLFdBQVYsR0FBd0IsRUFBeEI7RUFDQUosVUFBVSxDQUFDRixRQUFYLENBQW9CeEIsT0FBcEIsQ0FBNEJDLElBQUksSUFBSTtJQUNoQyxNQUFNOEIsSUFBSSxHQUFHOUIsSUFBSSxDQUFDQyxNQUFMLENBQVk4QixLQUFaLENBQWtCLEdBQWxCLENBQWI7SUFDQSxNQUFNQyxPQUFPLEdBQUcsSUFBSUMsSUFBSixDQUFTSCxJQUFULEVBQWVJLGtCQUFmLEVBQWhCO0lBQ0EsTUFBTUMsaUJBQWlCLEdBQUdULFFBQVEsQ0FBQ1UsYUFBVCxDQUF1QixLQUF2QixDQUExQjtJQUNBLE1BQU1DLEtBQUssR0FBR1gsUUFBUSxDQUFDVSxhQUFULENBQXVCLEdBQXZCLENBQWQ7SUFDQSxNQUFNZCxJQUFJLEdBQUdJLFFBQVEsQ0FBQ1UsYUFBVCxDQUF1QixLQUF2QixDQUFiO0lBQ0FkLElBQUksQ0FBQ2dCLEdBQUwsK0NBQWlEdEMsSUFBSSxDQUFDYSxPQUFMLENBQWEsQ0FBYixFQUFnQlMsSUFBakU7SUFDQSxNQUFNaUIsS0FBSyxHQUFHYixRQUFRLENBQUNVLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBZDtJQUNBLE1BQU1JLEtBQUssR0FBR2QsUUFBUSxDQUFDVSxhQUFULENBQXVCLEdBQXZCLENBQWQ7SUFFQUMsS0FBSyxDQUFDUixXQUFOLEdBQW9CRyxPQUFwQjtJQUNBTyxLQUFLLENBQUNWLFdBQU4sYUFBdUJZLElBQUksQ0FBQ0MsS0FBTCxDQUFXMUMsSUFBSSxDQUFDUyxJQUFMLENBQVVELElBQXJCLENBQXZCO0lBQ0FnQyxLQUFLLENBQUNYLFdBQU4sYUFBdUI3QixJQUFJLENBQUNhLE9BQUwsQ0FBYSxDQUFiLEVBQWdCQyxXQUFoQixDQUE0QkMsTUFBNUIsQ0FBbUMsQ0FBbkMsRUFBc0NDLFdBQXRDLEtBQXNEaEIsSUFBSSxDQUFDYSxPQUFMLENBQWEsQ0FBYixFQUFnQkMsV0FBaEIsQ0FBNEJHLEtBQTVCLENBQWtDLENBQWxDLENBQTdFO0lBRUFrQixpQkFBaUIsQ0FBQ1EsV0FBbEIsQ0FBOEJOLEtBQTlCO0lBQ0FGLGlCQUFpQixDQUFDUSxXQUFsQixDQUE4QnJCLElBQTlCO0lBQ0FhLGlCQUFpQixDQUFDUSxXQUFsQixDQUE4QkosS0FBOUI7SUFDQUosaUJBQWlCLENBQUNRLFdBQWxCLENBQThCSCxLQUE5QjtJQUNBWixTQUFTLENBQUNlLFdBQVYsQ0FBc0JSLGlCQUF0QjtFQUNILENBbkJEO0VBcUJBMUIsSUFBSSxDQUFDa0MsV0FBTCxDQUFpQmYsU0FBakI7QUFDSDs7QUFFRCxTQUFTakMsbUJBQVQsQ0FBNkJmLFFBQTdCLEVBQXVDQyxTQUF2QyxFQUFrRDtFQUM5QyxPQUFPQyxLQUFLLGdFQUF5REYsUUFBekQsa0JBQXlFQyxTQUF6RSwyREFBMEk7SUFBQ0UsSUFBSSxFQUFFO0VBQVAsQ0FBMUksQ0FBWjtBQUNIOztBQUVELFNBQVM2RCxxQkFBVCxDQUErQjNELEdBQS9CLEVBQW9DO0VBQ2hDLE9BQU9ILEtBQUssOERBQXVERyxHQUF2RCwyREFBa0g7SUFBQ0YsSUFBSSxFQUFFO0VBQVAsQ0FBbEgsQ0FBWjtBQUNIOztBQUVELGVBQWU4RCxhQUFmLENBQTZCQyxRQUE3QixFQUF1QztFQUNuQyxNQUFNQyxhQUFhLEdBQUcsTUFBTS9ELFNBQVMsQ0FBQzhELFFBQUQsQ0FBckM7RUFDQSxNQUFNRSxXQUFXLEdBQUcsTUFBTUQsYUFBYSxDQUFDdEQsSUFBZCxFQUExQjtFQUNBLE1BQU13RCxlQUFlLEdBQUcsTUFBTUwscUJBQXFCLENBQUNFLFFBQUQsQ0FBbkQ7RUFDQSxNQUFNSSxtQkFBbUIsR0FBRyxNQUFNRCxlQUFlLENBQUN4RCxJQUFoQixFQUFsQztFQUNBLE1BQU1JLE9BQU8sR0FBRyxFQUFoQjtFQUNBcUQsbUJBQW1CLENBQUNwRCxJQUFwQixDQUF5QkMsT0FBekIsQ0FBaUNDLElBQUksSUFBSTtJQUNyQyxJQUFJQSxJQUFJLENBQUNDLE1BQUwsQ0FBWUMsUUFBWixDQUFxQixVQUFyQixDQUFKLEVBQXNDO01BQ2xDTCxPQUFPLENBQUNNLElBQVIsQ0FBYUgsSUFBYjtJQUNIO0VBQ0osQ0FKRDtFQUtBLE1BQU1tRCxXQUFXLEdBQUc7SUFDaEJsRSxHQUFHLEVBQUUrRCxXQUFXLENBQUMzQyxJQUREO0lBRWhCQyxPQUFPLEVBQUUwQyxXQUFXLENBQUN6QyxHQUFaLENBQWdCRCxPQUZUO0lBR2hCRSxJQUFJLEVBQUVpQyxJQUFJLENBQUNDLEtBQUwsQ0FBWU0sV0FBVyxDQUFDdkMsSUFBWixDQUFpQkQsSUFBakIsR0FBd0IsRUFBekIsR0FBK0IsRUFBMUMsQ0FIVTtJQUloQkUsU0FBUyxFQUFFc0MsV0FBVyxDQUFDdkMsSUFBWixDQUFpQkUsVUFKWjtJQUtoQkMsSUFBSSxFQUFFb0MsV0FBVyxDQUFDbkMsT0FBWixDQUFvQixDQUFwQixFQUF1QkMsV0FBdkIsQ0FBbUNDLE1BQW5DLENBQTBDLENBQTFDLEVBQTZDQyxXQUE3QyxLQUE2RGdDLFdBQVcsQ0FBQ25DLE9BQVosQ0FBb0IsQ0FBcEIsRUFBdUJDLFdBQXZCLENBQW1DRyxLQUFuQyxDQUF5QyxDQUF6QyxDQUxuRDtJQU1oQkMsUUFBUSxFQUFFOEIsV0FBVyxDQUFDdkMsSUFBWixDQUFpQlMsUUFOWDtJQU9oQkMsU0FBUyxFQUFFNkIsV0FBVyxDQUFDNUIsSUFBWixDQUFpQkMsS0FQWjtJQVFoQkMsSUFBSSxFQUFFMEIsV0FBVyxDQUFDbkMsT0FBWixDQUFvQixDQUFwQixFQUF1QlMsSUFSYjtJQVNoQkMsUUFBUSxFQUFFMUI7RUFUTSxDQUFwQjtFQVdBLE9BQU9zRCxXQUFQO0FBQ0g7O0FBRUQsU0FBU0MsUUFBVCxDQUFrQjNCLFVBQWxCLEVBQThCO0VBQzFCLE1BQU1oQixJQUFJLEdBQUdpQixRQUFRLENBQUNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBYjtFQUNBLE1BQU1DLFNBQVMsR0FBR0YsUUFBUSxDQUFDQyxhQUFULENBQXVCLGVBQXZCLENBQWxCO0VBQ0FDLFNBQVMsQ0FBQ0MsV0FBVixHQUF3QixFQUF4QjtFQUNBLE1BQU13QixJQUFJLEdBQUczQixRQUFRLENBQUNVLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBYjtFQUNBLE1BQU1rQixLQUFLLEdBQUc1QixRQUFRLENBQUNVLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBZDtFQUNBLE1BQU1tQixNQUFNLEdBQUc3QixRQUFRLENBQUNVLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBZjtFQUNBLE1BQU1vQixLQUFLLEdBQUc5QixRQUFRLENBQUNVLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBZDtFQUNBLE1BQU1xQixNQUFNLEdBQUcvQixRQUFRLENBQUNVLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBZjtFQUNBLE1BQU1zQixLQUFLLEdBQUdoQyxRQUFRLENBQUNVLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBZDtFQUNBLE1BQU1kLElBQUksR0FBR0ksUUFBUSxDQUFDVSxhQUFULENBQXVCLEtBQXZCLENBQWI7RUFFQWQsSUFBSSxDQUFDZ0IsR0FBTCwrQ0FBZ0RiLFVBQVUsQ0FBQ0gsSUFBM0Q7RUFFQStCLElBQUksQ0FBQ3hCLFdBQUwsYUFBc0JKLFVBQVUsQ0FBQ3hDLEdBQWpDLGVBQXlDakIsV0FBVyxDQUFDMkYsRUFBWixDQUFlbEMsVUFBVSxDQUFDbkIsT0FBMUIsQ0FBekM7RUFDQWdELEtBQUssQ0FBQ3pCLFdBQU4sMEJBQW9DWSxJQUFJLENBQUNDLEtBQUwsQ0FBV2pCLFVBQVUsQ0FBQ2pCLElBQXRCLENBQXBDLG9CQUFzRW9ELG9CQUFvQixDQUFDbkMsVUFBVSxDQUFDakIsSUFBWixDQUExRjtFQUNBK0MsTUFBTSxDQUFDMUIsV0FBUCx5QkFBb0NZLElBQUksQ0FBQ0MsS0FBTCxDQUFXakIsVUFBVSxDQUFDZixTQUF0QixDQUFwQyxvQkFBMkVrRCxvQkFBb0IsQ0FBQ25DLFVBQVUsQ0FBQ2YsU0FBWixDQUEvRjtFQUNBOEMsS0FBSyxDQUFDM0IsV0FBTixzQkFBZ0NKLFVBQVUsQ0FBQ2IsSUFBM0M7RUFDQTZDLE1BQU0sQ0FBQzVCLFdBQVAsdUJBQWtDSixVQUFVLENBQUNQLFFBQTdDO0VBQ0F3QyxLQUFLLENBQUM3QixXQUFOLHlCQUFtQ0osVUFBVSxDQUFDTixTQUE5QyxtQkFBZ0UwQyxjQUFjLENBQUNwQyxVQUFVLENBQUNOLFNBQVosQ0FBOUU7RUFFQVMsU0FBUyxDQUFDZSxXQUFWLENBQXNCVSxJQUF0QjtFQUNBekIsU0FBUyxDQUFDZSxXQUFWLENBQXNCVyxLQUF0QjtFQUNBMUIsU0FBUyxDQUFDZSxXQUFWLENBQXNCWSxNQUF0QjtFQUNBM0IsU0FBUyxDQUFDZSxXQUFWLENBQXNCYSxLQUF0QjtFQUNBNUIsU0FBUyxDQUFDZSxXQUFWLENBQXNCYyxNQUF0QjtFQUNBN0IsU0FBUyxDQUFDZSxXQUFWLENBQXNCZSxLQUF0QjtFQUNBOUIsU0FBUyxDQUFDZSxXQUFWLENBQXNCckIsSUFBdEI7RUFFQWIsSUFBSSxDQUFDa0MsV0FBTCxDQUFpQmYsU0FBakI7QUFDSDs7QUFFRCxTQUFTZ0Msb0JBQVQsQ0FBOEJFLE9BQTlCLEVBQXVDO0VBQ25DLElBQUl0RCxJQUFJLEdBQUd1RCxVQUFVLENBQUNELE9BQUQsQ0FBckI7RUFDQSxPQUFPckIsSUFBSSxDQUFDQyxLQUFMLENBQVdsQyxJQUFJLEdBQUcsQ0FBUCxHQUFXLENBQVgsR0FBZSxFQUExQixDQUFQO0FBQ0g7O0FBRUQsU0FBU3FELGNBQVQsQ0FBd0JHLE9BQXhCLEVBQWlDO0VBQzdCLElBQUkzQyxLQUFLLEdBQUcwQyxVQUFVLENBQUNDLE9BQUQsQ0FBdEI7RUFDQSxPQUFPdkIsSUFBSSxDQUFDQyxLQUFMLENBQVdyQixLQUFLLEdBQUcsT0FBbkIsQ0FBUDtBQUNIOztBQUVENEMsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QixNQUF4QixFQUFnQyxNQUFNO0VBQ2xDaEYsV0FBVyxHQUFHaUYsSUFBZCxDQUFtQkMsSUFBSSxJQUFJO0lBQ3ZCaEIsUUFBUSxDQUFDZ0IsSUFBRCxDQUFSO0lBQ0E1QyxXQUFXLENBQUM0QyxJQUFELENBQVg7RUFDSCxDQUhEO0FBSUgsQ0FMRDtBQU9BLE1BQU1DLEtBQUssR0FBRzNDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixnQkFBdkIsQ0FBZDtBQUNBLE1BQU0yQyxTQUFTLEdBQUc1QyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsU0FBdkIsQ0FBbEI7QUFFQTJDLFNBQVMsQ0FBQ0osZ0JBQVYsQ0FBMkIsT0FBM0IsRUFBcUNLLENBQUQsSUFBTztFQUN2Q0EsQ0FBQyxDQUFDQyxjQUFGO0VBQ0EsTUFBTUMsU0FBUyxHQUFHSixLQUFLLENBQUNLLEtBQXhCO0VBQ0E3QixhQUFhLENBQUM0QixTQUFELENBQWIsQ0FBeUJOLElBQXpCLENBQThCQyxJQUFJLElBQUk7SUFDbENoQixRQUFRLENBQUNnQixJQUFELENBQVI7SUFDQTVDLFdBQVcsQ0FBQzRDLElBQUQsQ0FBWDtFQUNILENBSEQ7QUFJSCxDQVBELEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbm90aGVyLXdlYXRoZXItYXBwLy4vc3JjL3N0eWxlcy9tYWluLnNjc3M/MmZmNCIsIndlYnBhY2s6Ly9hbm90aGVyLXdlYXRoZXItYXBwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Fub3RoZXItd2VhdGhlci1hcHAvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9hbm90aGVyLXdlYXRoZXItYXBwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgJy4vc3R5bGVzL21haW4uc2Nzcyc7XG5cbmxldCByZWdpb25OYW1lcyA9IG5ldyBJbnRsLkRpc3BsYXlOYW1lcyhbJ2VuJ10sIHt0eXBlOiAncmVnaW9uJ30pO1xuXG5mdW5jdGlvbiBnZXRQb3MoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKHJlcywgcmVqKTtcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBhcGlDYWxsKGxhdGl0dWRlLCBsb25naXR1ZGUpIHtcbiAgIHJldHVybiBmZXRjaChgaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L3dlYXRoZXI/bGF0PSR7bGF0aXR1ZGV9Jmxvbj0ke2xvbmdpdHVkZX0mdW5pdHM9bWV0cmljJmFwcGlkPTMxZDYwYWUyMjkwNjAwMjQ2NGUwZTdmNGVmNjA4YmM1YCwge21vZGU6ICdjb3JzJ30pO1xufVxuXG5mdW5jdGlvbiBhcGlTZWFyY2gobG9jKSB7XG4gICAgcmV0dXJuIGZldGNoKGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9xPSR7bG9jfSZ1bml0cz1tZXRyaWMmYXBwaWQ9MzFkNjBhZTIyOTA2MDAyNDY0ZTBlN2Y0ZWY2MDhiYzVgLCB7bW9kZTogJ2NvcnMnfSlcbn1cblxuYXN5bmMgZnVuY3Rpb24gd2VhdGhlckxvYWQoKSB7XG4gICAgY29uc3QgdXNlclBvcyA9IGF3YWl0IGdldFBvcygpO1xuICAgIGNvbnN0IHVzZXJMYXQgPSB1c2VyUG9zLmNvb3Jkcy5sYXRpdHVkZTtcbiAgICBjb25zdCB1c2VyTG9uZyA9IHVzZXJQb3MuY29vcmRzLmxvbmdpdHVkZTtcbiAgICBjb25zdCB1c2VyQVBJID0gYXdhaXQgYXBpQ2FsbCh1c2VyTGF0LCB1c2VyTG9uZyk7XG4gICAgY29uc3QgdXNlckpTT04gPSBhd2FpdCB1c2VyQVBJLmpzb24oKTtcbiAgICBjb25zdCB1c2VyRm9yZWNhc3QgPSBhd2FpdCB3ZWF0aGVyTG9hZEZvcmVjYXN0KHVzZXJMYXQsIHVzZXJMb25nKTtcbiAgICBjb25zdCB1c2VyRm9yZWNhc3RKU09OID0gYXdhaXQgdXNlckZvcmVjYXN0Lmpzb24oKTtcbiAgICBjb25zdCBmaXZlRGF5ID0gW107XG4gICAgdXNlckZvcmVjYXN0SlNPTi5saXN0LmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmR0X3R4dC5pbmNsdWRlcyhcIjEyOjAwOjAwXCIpKSB7XG4gICAgICAgICAgICBmaXZlRGF5LnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICB9KVxuICAgIGNvbnN0IHVzZXJXZWF0aGVyRGF0YSA9IHtcbiAgICAgICAgbG9jOiB1c2VySlNPTi5uYW1lLFxuICAgICAgICBjb3VudHJ5OiB1c2VySlNPTi5zeXMuY291bnRyeSxcbiAgICAgICAgdGVtcDogdXNlckpTT04ubWFpbi50ZW1wLFxuICAgICAgICBmZWVsc0xpa2U6IHVzZXJKU09OLm1haW4uZmVlbHNfbGlrZSxcbiAgICAgICAgZGVzYzogdXNlckpTT04ud2VhdGhlclswXS5kZXNjcmlwdGlvbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHVzZXJKU09OLndlYXRoZXJbMF0uZGVzY3JpcHRpb24uc2xpY2UoMSksXG4gICAgICAgIGh1bWlkaXR5OiB1c2VySlNPTi5tYWluLmh1bWlkaXR5LFxuICAgICAgICB3aW5kU3BlZWQ6IHVzZXJKU09OLndpbmQuc3BlZWQsXG4gICAgICAgIGljb246IHVzZXJKU09OLndlYXRoZXJbMF0uaWNvbixcbiAgICAgICAgZm9yZWNhc3Q6IGZpdmVEYXlcbiAgICB9XG4gICAgcmV0dXJuIHVzZXJXZWF0aGVyRGF0YTtcbn1cblxuZnVuY3Rpb24gYWRkRm9yZWNhc3Qod2VhdGhlck9iaikge1xuICAgIGNvbnN0IG1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbicpO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JlY2FzdCcpO1xuICAgIGNvbnRhaW5lci50ZXh0Q29udGVudCA9ICcnO1xuICAgIHdlYXRoZXJPYmouZm9yZWNhc3QuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgY29uc3QgZGF0ZSA9IGl0ZW0uZHRfdHh0LnNwbGl0KCcgJyk7XG4gICAgICAgIGNvbnN0IG5ld0RhdGUgPSBuZXcgRGF0ZShkYXRlKS50b0xvY2FsZURhdGVTdHJpbmcoKTtcbiAgICAgICAgY29uc3QgZm9yZWNhc3RDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29uc3QgZkRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgIGNvbnN0IGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgaWNvbi5zcmMgPSAgYGh0dHBzOi8vb3BlbndlYXRoZXJtYXAub3JnL2ltZy93bi8ke2l0ZW0ud2VhdGhlclswXS5pY29ufS5wbmdgO1xuICAgICAgICBjb25zdCBmVGVtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgY29uc3QgZkRlc2MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG5cbiAgICAgICAgZkRhdGUudGV4dENvbnRlbnQgPSBuZXdEYXRlO1xuICAgICAgICBmVGVtcC50ZXh0Q29udGVudCA9IGAke01hdGgucm91bmQoaXRlbS5tYWluLnRlbXApfcKwQ2A7XG4gICAgICAgIGZEZXNjLnRleHRDb250ZW50ID0gYCR7aXRlbS53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgaXRlbS53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uLnNsaWNlKDEpfWA7XG5cbiAgICAgICAgZm9yZWNhc3RDb250YWluZXIuYXBwZW5kQ2hpbGQoZkRhdGUpO1xuICAgICAgICBmb3JlY2FzdENvbnRhaW5lci5hcHBlbmRDaGlsZChpY29uKTtcbiAgICAgICAgZm9yZWNhc3RDb250YWluZXIuYXBwZW5kQ2hpbGQoZlRlbXApO1xuICAgICAgICBmb3JlY2FzdENvbnRhaW5lci5hcHBlbmRDaGlsZChmRGVzYyk7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChmb3JlY2FzdENvbnRhaW5lcik7XG4gICAgfSk7XG5cbiAgICBtYWluLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG59XG5cbmZ1bmN0aW9uIHdlYXRoZXJMb2FkRm9yZWNhc3QobGF0aXR1ZGUsIGxvbmdpdHVkZSkge1xuICAgIHJldHVybiBmZXRjaChgaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L2ZvcmVjYXN0P2xhdD0ke2xhdGl0dWRlfSZsb249JHtsb25naXR1ZGV9JnVuaXRzPW1ldHJpYyZhcHBpZD0zMWQ2MGFlMjI5MDYwMDI0NjRlMGU3ZjRlZjYwOGJjNWAsIHttb2RlOiAnY29ycyd9KTtcbn1cblxuZnVuY3Rpb24gd2VhdGhlclNlYXJjaEZvcmVjYXN0KGxvYykge1xuICAgIHJldHVybiBmZXRjaChgaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L2ZvcmVjYXN0P3E9JHtsb2N9JnVuaXRzPW1ldHJpYyZhcHBpZD0zMWQ2MGFlMjI5MDYwMDI0NjRlMGU3ZjRlZjYwOGJjNWAsIHttb2RlOiAnY29ycyd9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2VhcmNoV2VhdGhlcihsb2NhdGlvbikge1xuICAgIGNvbnN0IHdlYXRoZXJTZWFyY2ggPSBhd2FpdCBhcGlTZWFyY2gobG9jYXRpb24pO1xuICAgIGNvbnN0IHdlYXRoZXJKU09OID0gYXdhaXQgd2VhdGhlclNlYXJjaC5qc29uKCk7XG4gICAgY29uc3Qgd2VhdGhlckZvcmVjYXN0ID0gYXdhaXQgd2VhdGhlclNlYXJjaEZvcmVjYXN0KGxvY2F0aW9uKTtcbiAgICBjb25zdCB3ZWF0aGVyRm9yZWNhc3RKU09OID0gYXdhaXQgd2VhdGhlckZvcmVjYXN0Lmpzb24oKTtcbiAgICBjb25zdCBmaXZlRGF5ID0gW107XG4gICAgd2VhdGhlckZvcmVjYXN0SlNPTi5saXN0LmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmR0X3R4dC5pbmNsdWRlcyhcIjEyOjAwOjAwXCIpKSB7XG4gICAgICAgICAgICBmaXZlRGF5LnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICB9KVxuICAgIGNvbnN0IHdlYXRoZXJEYXRhID0ge1xuICAgICAgICBsb2M6IHdlYXRoZXJKU09OLm5hbWUsXG4gICAgICAgIGNvdW50cnk6IHdlYXRoZXJKU09OLnN5cy5jb3VudHJ5LFxuICAgICAgICB0ZW1wOiBNYXRoLnJvdW5kKCh3ZWF0aGVySlNPTi5tYWluLnRlbXAgKiAxMCkgLyAxMCksXG4gICAgICAgIGZlZWxzTGlrZTogd2VhdGhlckpTT04ubWFpbi5mZWVsc19saWtlLFxuICAgICAgICBkZXNjOiB3ZWF0aGVySlNPTi53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd2VhdGhlckpTT04ud2VhdGhlclswXS5kZXNjcmlwdGlvbi5zbGljZSgxKSxcbiAgICAgICAgaHVtaWRpdHk6IHdlYXRoZXJKU09OLm1haW4uaHVtaWRpdHksXG4gICAgICAgIHdpbmRTcGVlZDogd2VhdGhlckpTT04ud2luZC5zcGVlZCxcbiAgICAgICAgaWNvbjogd2VhdGhlckpTT04ud2VhdGhlclswXS5pY29uLFxuICAgICAgICBmb3JlY2FzdDogZml2ZURheVxuICAgIH1cbiAgICByZXR1cm4gd2VhdGhlckRhdGE7XG59XG5cbmZ1bmN0aW9uIGFkZFRvRE9NKHdlYXRoZXJPYmopIHtcbiAgICBjb25zdCBtYWluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1haW4nKTtcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud2VhdGhlci1pbmZvJyk7XG4gICAgY29udGFpbmVyLnRleHRDb250ZW50ID0gJyc7XG4gICAgY29uc3QgcExvYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBjb25zdCBwVGVtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBjb25zdCBwRmVlbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgY29uc3QgcERlc2MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgY29uc3QgcEh1bWlkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIGNvbnN0IHBXaW5kID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIGNvbnN0IGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICAgIGljb24uc3JjID0gYGh0dHBzOi8vb3BlbndlYXRoZXJtYXAub3JnL2ltZy93bi8ke3dlYXRoZXJPYmouaWNvbn0ucG5nYFxuXG4gICAgcExvYy50ZXh0Q29udGVudCA9IGAke3dlYXRoZXJPYmoubG9jfSwgJHtyZWdpb25OYW1lcy5vZih3ZWF0aGVyT2JqLmNvdW50cnkpfWA7XG4gICAgcFRlbXAudGV4dENvbnRlbnQgPSBgVGVtcGVyYXR1cmU6ICR7TWF0aC5yb3VuZCh3ZWF0aGVyT2JqLnRlbXApfcKwQyAoJHtnZXRCdXJnZXJUZW1wZXJhdHVyZSh3ZWF0aGVyT2JqLnRlbXApfcKwRilgO1xuICAgIHBGZWVscy50ZXh0Q29udGVudCA9IGBGZWVscyBsaWtlOiAke01hdGgucm91bmQod2VhdGhlck9iai5mZWVsc0xpa2UpfcKwQyAoJHtnZXRCdXJnZXJUZW1wZXJhdHVyZSh3ZWF0aGVyT2JqLmZlZWxzTGlrZSl9wrBGKWA7XG4gICAgcERlc2MudGV4dENvbnRlbnQgPSBgV2VhdGhlcjogJHt3ZWF0aGVyT2JqLmRlc2N9YDtcbiAgICBwSHVtaWQudGV4dENvbnRlbnQgPSBgSHVtaWRpdHk6ICR7d2VhdGhlck9iai5odW1pZGl0eX0lYDtcbiAgICBwV2luZC50ZXh0Q29udGVudCA9IGBXaW5kIHNwZWVkOiAke3dlYXRoZXJPYmoud2luZFNwZWVkfSBtL3MgKCR7Z2V0QnVyZ2VyU3BlZWQod2VhdGhlck9iai53aW5kU3BlZWQpfSBmdC9zKWA7XG5cbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocExvYyk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHBUZW1wKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocEZlZWxzKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocERlc2MpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChwSHVtaWQpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChwV2luZCk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGljb24pO1xuXG4gICAgbWFpbi5hcHBlbmRDaGlsZChjb250YWluZXIpO1xufVxuXG5mdW5jdGlvbiBnZXRCdXJnZXJUZW1wZXJhdHVyZSh0ZW1wQ2VsKSB7XG4gICAgdmFyIHRlbXAgPSBwYXJzZUZsb2F0KHRlbXBDZWwpO1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHRlbXAgKiA5IC8gNSArIDMyKTtcbn1cblxuZnVuY3Rpb24gZ2V0QnVyZ2VyU3BlZWQoc3BlZWRNUykge1xuICAgIHZhciBzcGVlZCA9IHBhcnNlRmxvYXQoc3BlZWRNUyk7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoc3BlZWQgKiAzLjI4MDg0KTtcbn1cblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgd2VhdGhlckxvYWQoKS50aGVuKGRhdGEgPT4ge1xuICAgICAgICBhZGRUb0RPTShkYXRhKTtcbiAgICAgICAgYWRkRm9yZWNhc3QoZGF0YSk7XG4gICAgfSk7XG59KVxuXG5jb25zdCBpbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53ZWF0aGVyLWlucHV0Jyk7XG5jb25zdCBzdWJtaXRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3VibWl0Jyk7XG5cbnN1Ym1pdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHVzZXJJbnB1dCA9IGlucHV0LnZhbHVlO1xuICAgIHNlYXJjaFdlYXRoZXIodXNlcklucHV0KS50aGVuKGRhdGEgPT4ge1xuICAgICAgICBhZGRUb0RPTShkYXRhKTtcbiAgICAgICAgYWRkRm9yZWNhc3QoZGF0YSk7XG4gICAgfSk7XG59KSJdLCJuYW1lcyI6WyJyZWdpb25OYW1lcyIsIkludGwiLCJEaXNwbGF5TmFtZXMiLCJ0eXBlIiwiZ2V0UG9zIiwiUHJvbWlzZSIsInJlcyIsInJlaiIsIm5hdmlnYXRvciIsImdlb2xvY2F0aW9uIiwiZ2V0Q3VycmVudFBvc2l0aW9uIiwiYXBpQ2FsbCIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiZmV0Y2giLCJtb2RlIiwiYXBpU2VhcmNoIiwibG9jIiwid2VhdGhlckxvYWQiLCJ1c2VyUG9zIiwidXNlckxhdCIsImNvb3JkcyIsInVzZXJMb25nIiwidXNlckFQSSIsInVzZXJKU09OIiwianNvbiIsInVzZXJGb3JlY2FzdCIsIndlYXRoZXJMb2FkRm9yZWNhc3QiLCJ1c2VyRm9yZWNhc3RKU09OIiwiZml2ZURheSIsImxpc3QiLCJmb3JFYWNoIiwiaXRlbSIsImR0X3R4dCIsImluY2x1ZGVzIiwicHVzaCIsInVzZXJXZWF0aGVyRGF0YSIsIm5hbWUiLCJjb3VudHJ5Iiwic3lzIiwidGVtcCIsIm1haW4iLCJmZWVsc0xpa2UiLCJmZWVsc19saWtlIiwiZGVzYyIsIndlYXRoZXIiLCJkZXNjcmlwdGlvbiIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJodW1pZGl0eSIsIndpbmRTcGVlZCIsIndpbmQiLCJzcGVlZCIsImljb24iLCJmb3JlY2FzdCIsImFkZEZvcmVjYXN0Iiwid2VhdGhlck9iaiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNvbnRhaW5lciIsInRleHRDb250ZW50IiwiZGF0ZSIsInNwbGl0IiwibmV3RGF0ZSIsIkRhdGUiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJmb3JlY2FzdENvbnRhaW5lciIsImNyZWF0ZUVsZW1lbnQiLCJmRGF0ZSIsInNyYyIsImZUZW1wIiwiZkRlc2MiLCJNYXRoIiwicm91bmQiLCJhcHBlbmRDaGlsZCIsIndlYXRoZXJTZWFyY2hGb3JlY2FzdCIsInNlYXJjaFdlYXRoZXIiLCJsb2NhdGlvbiIsIndlYXRoZXJTZWFyY2giLCJ3ZWF0aGVySlNPTiIsIndlYXRoZXJGb3JlY2FzdCIsIndlYXRoZXJGb3JlY2FzdEpTT04iLCJ3ZWF0aGVyRGF0YSIsImFkZFRvRE9NIiwicExvYyIsInBUZW1wIiwicEZlZWxzIiwicERlc2MiLCJwSHVtaWQiLCJwV2luZCIsIm9mIiwiZ2V0QnVyZ2VyVGVtcGVyYXR1cmUiLCJnZXRCdXJnZXJTcGVlZCIsInRlbXBDZWwiLCJwYXJzZUZsb2F0Iiwic3BlZWRNUyIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0aGVuIiwiZGF0YSIsImlucHV0Iiwic3VibWl0QnRuIiwiZSIsInByZXZlbnREZWZhdWx0IiwidXNlcklucHV0IiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9